// <auto-generated />
using EntityFrameworkTest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace EntityFrameworkTest.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180501221120_Fix-Common2")]
    partial class FixCommon2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("EntityFrameworkTest.Models.Organization", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("EntityFrameworkTest.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("Name");

                    b.Property<int?>("OwningGroupID");

                    b.Property<int?>("ProductGroupIDID");

                    b.Property<int?>("organizationID");

                    b.HasKey("ID");

                    b.HasIndex("OwningGroupID");

                    b.HasIndex("ProductGroupIDID");

                    b.HasIndex("organizationID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EntityFrameworkTest.Models.ProductGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("Name");

                    b.Property<int?>("organizationID");

                    b.HasKey("ID");

                    b.HasIndex("organizationID");

                    b.ToTable("ProductGroup");
                });

            modelBuilder.Entity("EntityFrameworkTest.Models.Product", b =>
                {
                    b.HasOne("EntityFrameworkTest.Models.ProductGroup", "OwningGroup")
                        .WithMany()
                        .HasForeignKey("OwningGroupID");

                    b.HasOne("EntityFrameworkTest.Models.ProductGroup", "ProductGroupID")
                        .WithMany()
                        .HasForeignKey("ProductGroupIDID");

                    b.HasOne("EntityFrameworkTest.Models.Organization", "organization")
                        .WithMany()
                        .HasForeignKey("organizationID");
                });

            modelBuilder.Entity("EntityFrameworkTest.Models.ProductGroup", b =>
                {
                    b.HasOne("EntityFrameworkTest.Models.Organization", "organization")
                        .WithMany()
                        .HasForeignKey("organizationID");
                });
#pragma warning restore 612, 618
        }
    }
}
